#!/usr/bin/env bash

# Create a network namespace with a WireGuard interface and route all
# traffic through it. The WireGuard interface is configured to use
# NordVPN.
#
# Usage:
# $0 [up|down]
# Some configuration is available through environment variables
# See manual for details
#
# Based on https://github.com/VTimofeenko/wireguard-namespace-service

set -euo pipefail
set -x

# The WireGuard interface IP address. Defaults to the address which
# the `nordvpn` command assigns to the interface (10.5.0.2/32).
WG_IP=${WG_IP:-"10.5.0.2/32"}

# The country code to use for the NordVPN server. Default to Switzerland.
WG_COUNTRY_CODE=${COUNTRY_CODE:-"CH"}

# The command to run. Either `up` or `down`.
COMMAND="$1"
# The name to be used for the namespace, link name and config file name
NAME="$2"

# A file containing the WireGuard private key.
WG_PRIVATE_KEY="/etc/wireguard/${NAME}.key"

recommended_nordvpn_server() {
  local url response country_id
  echo >&2 "Finding recommended NordVPN server for country code ${WG_COUNTRY_CODE}"

  # Get the country ID from the country code
  url="https://api.nordvpn.com/v1/servers/countries"
  country_id=$(curl --silent --show-error "${url}" | jq -r ".[] | select(.code == \"${WG_COUNTRY_CODE}\") | .id")

  # Get the recommended server for the country
  url="https://api.nordvpn.com/v1/servers/recommendations\
?filters\[country_id\]=${country_id}\
&\[servers_technologies\]\[identifier\]=wireguard_udp\
&\[servers_groups\]\[identifier\]=P2P\
&limit=1"
  response=$(curl --silent --show-error "${url}")

  # Print the hostname and public key
  jq '.[] |
    {
      hostname,
      public_key: (
        .technologies[] |
        select(.identifier == "wireguard_udp").metadata[] |
        select(.name == "public_key").value
      )
    }' <<< "${response}"
}

up() {
    local recommended_server hostname public_key

    # Ensure that the namespace is down before starting
    down >/dev/null 2>&1 || true

    echo >&2 "Starting namespace ${NAME}"

    # Create the namespace
    ip netns add "$NAME"

    # Set the loopback interface up (required for transmission to be
    # able to bind to the interface)
    ip -n "${NAME}" link set lo up

    # Create the WireGuard interface
    ip link add "${NAME}" type wireguard

    recommended_server=$(recommended_nordvpn_server)
    hostname=$(jq -r '.hostname' <<< "${recommended_server}")
    public_key=$(jq -r '.public_key' <<< "${recommended_server}")

    echo >&2 "Connecting to ${hostname}"

    # Assert that the hostname starts with the country code in lowercase.
    # The double comma is a bashism to convert the variable to lowercase.
    if [[ ! "${hostname}" =~ ^"${WG_COUNTRY_CODE,,}" ]]; then
        echo >&2 "Hostname ${hostname} does not start with ${WG_COUNTRY_CODE,,}"
        exit 1
    fi

    # Set the WireGuard private key and peer. Do this before moving the
    # interface into the namespace so that the hostname can be resolved.
    wg set "${NAME}" \
       private-key "${WG_PRIVATE_KEY}" \
       peer "${public_key}" \
       endpoint "${hostname}:51820" \
       allowed-ips 0.0.0.0/0,::0/0

    # Move the WireGuard interface into the namespace
    ip link set "${NAME}" netns "$NAME"

    # Configure the WireGuard interface
    ip -n "${NAME}" addr add "${WG_IP}" dev "${NAME}"
    ip -n "${NAME}" link set mtu 1420 up dev "${NAME}"

    # Route all traffic through the WireGuard interface
    ip -j -n "${NAME}" route add default dev "${NAME}"
    echo >&2 "Namespace ${NAME} is up"
}

down() {
    echo >&2 "Stopping namespace ${NAME}"
    ip -n "${NAME}" link set down dev "${NAME}" || true
    ip -n "${NAME}" link del dev "${NAME}" || true
    ip netns del "${NAME}" || true
    ip link del "${NAME}" || true
    echo >&2 "Namespace ${NAME} is down"
}

case "$COMMAND" in
    up) up "$@" ;;
    down) down "$@" ;;
esac
